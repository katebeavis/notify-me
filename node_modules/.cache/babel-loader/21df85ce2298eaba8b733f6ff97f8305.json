{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { NotificationType } from '../../Types';\nvar sortBy = [NotificationType.ACTION_REQUIRED, NotificationType.INFO, NotificationType.SUCCESS, NotificationType.ERROR, NotificationType.PROMOTIONAL];\nexport var REQUIRED_TYPES = [NotificationType.ACTION_REQUIRED, NotificationType.INFO];\nvar OPTIONAL_TYPES = [NotificationType.PROMOTIONAL];\nexport var customSort = function customSort(notifications) {\n  var sortByObject = sortBy.reduce(function (obj, item, index) {\n    return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, item, index));\n  }, {});\n  return notifications.sort(function (a, b) {\n    return sortByObject[a['type']] - sortByObject[b['type']];\n  });\n};\nexport var getNotificationsToShow = function getNotificationsToShow(notifications) {\n  var requiredNotifications = getRequiredNotifications(notifications);\n  var notificationsToShow = requiredNotifications.length >= 1 ? removeOptionalNotifications(notifications) : notifications;\n  return firstThreeNotifications(notificationsToShow);\n};\n\nvar getRequiredNotifications = function getRequiredNotifications(notifications) {\n  return notifications.filter(function (notification) {\n    return REQUIRED_TYPES.includes(notification.type);\n  });\n};\n\nvar removeOptionalNotifications = function removeOptionalNotifications(notifications) {\n  return notifications.filter(function (notification) {\n    return !OPTIONAL_TYPES.includes(notification.type);\n  });\n};\n\nvar firstThreeNotifications = function firstThreeNotifications(notifications) {\n  var requiredNotifications = getRequiredNotifications(notifications);\n  return requiredNotifications.length >= 3 ? requiredNotifications : notifications.slice(0, 3);\n};","map":{"version":3,"sources":["/Users/kate.beavis/development/notify-me/src/Components/Context/helper.ts"],"names":["NotificationType","sortBy","ACTION_REQUIRED","INFO","SUCCESS","ERROR","PROMOTIONAL","REQUIRED_TYPES","OPTIONAL_TYPES","customSort","notifications","sortByObject","reduce","obj","item","index","sort","a","b","getNotificationsToShow","requiredNotifications","getRequiredNotifications","notificationsToShow","length","removeOptionalNotifications","firstThreeNotifications","filter","notification","includes","type","slice"],"mappings":";;;;;;AAAA,SAAwBA,gBAAxB,QAAgD,aAAhD;AAEA,IAAMC,MAAM,GAAG,CACbD,gBAAgB,CAACE,eADJ,EAEbF,gBAAgB,CAACG,IAFJ,EAGbH,gBAAgB,CAACI,OAHJ,EAIbJ,gBAAgB,CAACK,KAJJ,EAKbL,gBAAgB,CAACM,WALJ,CAAf;AAQA,OAAO,IAAMC,cAAc,GAAG,CAC5BP,gBAAgB,CAACE,eADW,EAE5BF,gBAAgB,CAACG,IAFW,CAAvB;AAIP,IAAMK,cAAc,GAAG,CAACR,gBAAgB,CAACM,WAAlB,CAAvB;AAEA,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,aAAD,EAAoC;AAC5D,MAAMC,YAAY,GAAGV,MAAM,CAACW,MAAP,CAAc,UAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAsB;AACvD,2CACKF,GADL,2BAEGC,IAFH,EAEUC,KAFV;AAID,GALoB,EAKlB,EALkB,CAArB;AAMA,SAAOL,aAAa,CAACM,IAAd,CACL,UAACC,CAAD,EAAmBC,CAAnB;AAAA,WACEP,YAAY,CAACM,CAAC,CAAC,MAAD,CAAF,CAAZ,GAA0BN,YAAY,CAACO,CAAC,CAAC,MAAD,CAAF,CADxC;AAAA,GADK,CAAP;AAID,CAXM;AAaP,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACT,aAAD,EAAoC;AACxE,MAAMU,qBAAqB,GAAGC,wBAAwB,CAACX,aAAD,CAAtD;AACA,MAAMY,mBAAmB,GACvBF,qBAAqB,CAACG,MAAtB,IAAgC,CAAhC,GACIC,2BAA2B,CAACd,aAAD,CAD/B,GAEIA,aAHN;AAIA,SAAOe,uBAAuB,CAACH,mBAAD,CAA9B;AACD,CAPM;;AASP,IAAMD,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACX,aAAD;AAAA,SAC/BA,aAAa,CAACgB,MAAd,CAAqB,UAACC,YAAD;AAAA,WACnBpB,cAAc,CAACqB,QAAf,CAAwBD,YAAY,CAACE,IAArC,CADmB;AAAA,GAArB,CAD+B;AAAA,CAAjC;;AAKA,IAAML,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACd,aAAD;AAAA,SAClCA,aAAa,CAACgB,MAAd,CACE,UAACC,YAAD;AAAA,WAAiC,CAACnB,cAAc,CAACoB,QAAf,CAAwBD,YAAY,CAACE,IAArC,CAAlC;AAAA,GADF,CADkC;AAAA,CAApC;;AAKA,IAAMJ,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACf,aAAD,EAAoC;AAClE,MAAMU,qBAAqB,GAAGC,wBAAwB,CAACX,aAAD,CAAtD;AACA,SAAOU,qBAAqB,CAACG,MAAtB,IAAgC,CAAhC,GACHH,qBADG,GAEHV,aAAa,CAACoB,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAFJ;AAGD,CALD","sourcesContent":["import { INotification, NotificationType } from '../../Types';\n\nconst sortBy = [\n  NotificationType.ACTION_REQUIRED,\n  NotificationType.INFO,\n  NotificationType.SUCCESS,\n  NotificationType.ERROR,\n  NotificationType.PROMOTIONAL,\n];\n\nexport const REQUIRED_TYPES = [\n  NotificationType.ACTION_REQUIRED,\n  NotificationType.INFO,\n];\nconst OPTIONAL_TYPES = [NotificationType.PROMOTIONAL];\n\nexport const customSort = (notifications: INotification[]) => {\n  const sortByObject = sortBy.reduce((obj, item, index) => {\n    return {\n      ...obj,\n      [item]: index,\n    };\n  }, {});\n  return notifications.sort(\n    (a: INotification, b: INotification) =>\n      sortByObject[a['type']] - sortByObject[b['type']]\n  );\n};\n\nexport const getNotificationsToShow = (notifications: INotification[]) => {\n  const requiredNotifications = getRequiredNotifications(notifications);\n  const notificationsToShow =\n    requiredNotifications.length >= 1\n      ? removeOptionalNotifications(notifications)\n      : notifications;\n  return firstThreeNotifications(notificationsToShow);\n};\n\nconst getRequiredNotifications = (notifications: INotification[]) =>\n  notifications.filter((notification: INotification) =>\n    REQUIRED_TYPES.includes(notification.type)\n  );\n\nconst removeOptionalNotifications = (notifications: INotification[]) =>\n  notifications.filter(\n    (notification: INotification) => !OPTIONAL_TYPES.includes(notification.type)\n  );\n\nconst firstThreeNotifications = (notifications: INotification[]) => {\n  const requiredNotifications = getRequiredNotifications(notifications);\n  return requiredNotifications.length >= 3\n    ? requiredNotifications\n    : notifications.slice(0, 3);\n};\n"]},"metadata":{},"sourceType":"module"}