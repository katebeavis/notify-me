{"ast":null,"code":"function _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 16px;\\n  right: 16px;\\n  pointer-events: none;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useCallback } from 'react';\nimport { createPortal } from 'react-dom';\nimport { v1 } from 'uuid';\nimport styled from 'styled-components';\nimport { AnimatePresence } from 'framer-motion';\nimport NotificationContext from './NotificationContext';\nimport useCreateDomElement from './Portal';\nimport DefaultNotification from '../DefaultNotification/DefaultNotification';\nimport NotificationContainer from '../NotificationContainer/NotificationContainer';\nimport { customSort, getNotificationsToShow, REQUIRED_TYPES } from './helper';\n\nvar useNotifications = function useNotifications() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      notifications = _useState2[0],\n      setNotifications = _useState2[1];\n\n  var notify = useCallback(function (notificationPayload) {\n    var id = v1();\n\n    var removeNotification = function removeNotification() {\n      setNotifications(function (notifications) {\n        return notifications.filter(function (notification) {\n          return notification.id !== id;\n        });\n      });\n    };\n\n    var notification = _objectSpread(_objectSpread({\n      id: id\n    }, !REQUIRED_TYPES.includes(notificationPayload.type) && {\n      onClose: removeNotification\n    }), notificationPayload);\n\n    setNotifications(function (notifications) {\n      return [].concat(_toConsumableArray(notifications), [notification]);\n    });\n  }, []);\n  var sortedNotifications = customSort(notifications);\n  var notificationsToShow = getNotificationsToShow(sortedNotifications);\n  console.log({\n    sortedNotifications: sortedNotifications\n  });\n  return {\n    notify: notify,\n    notificationsToShow: notificationsToShow\n  };\n};\n\nvar defaultComponents = {\n  Notification: DefaultNotification\n};\n\nvar NotificationProvider = function NotificationProvider(_ref) {\n  var _ref$components = _ref.components,\n      components = _ref$components === void 0 ? defaultComponents : _ref$components,\n      children = _ref.children;\n\n  var _useNotifications = useNotifications(),\n      notify = _useNotifications.notify,\n      notificationsToShow = _useNotifications.notificationsToShow;\n\n  var notificationRoot = useCreateDomElement();\n\n  var _defaultComponents$co = _objectSpread(_objectSpread({}, defaultComponents), components),\n      Notification = _defaultComponents$co.Notification;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NotificationContext.Provider, {\n    value: {\n      notify: notify\n    }\n  }, children), notificationRoot && createPortal( /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(AnimatePresence, null, notificationsToShow.map(function (notification) {\n    return /*#__PURE__*/React.createElement(NotificationContainer, {\n      key: notification.id\n    }, /*#__PURE__*/React.createElement(Notification, _extends({\n      key: notification.id\n    }, notification)));\n  }))), notificationRoot));\n};\n\nexport default NotificationProvider;\nvar Container = styled.div(_templateObject());","map":null,"metadata":{},"sourceType":"module"}